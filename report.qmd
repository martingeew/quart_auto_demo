---
title: "Top Tech Stocks Report"
format:
  html:
    code-fold: true
jupyter: python3
---
Author: Martin Wong @ [Autonomous Econ](https://autonomousecon.substack.com/)<br>
This is a demo site built using Quarto and Python. **Check out<br>the 
full Substack post [here](https://open.substack.com/pub/autonomousecon/p/how-the-pros-showcase-their-data?r=2o1mc&utm_campaign=post&utm_medium=web).**

::: {.panel-tabset .nav-pills}

## Daily indicators
```{python}
#| label: fig-Tech-Stocks
#| fig-cap: "Top tech stocks indexed"

import ffn
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime


# Function for generating the interactive plot
def plot_stock_timeseries_interactive(df):
    """
    Creates an interactive Plotly plot for all columns in the DataFrame.

    Parameters:
    df (pd.DataFrame): DataFrame with float columns and DatetimeIndex as index.
    """
    # Initialize the figure
    fig = go.Figure()

    # Add a line for each column
    for col in df.columns:
        fig.add_trace(
            go.Scatter(
                x=df.index,
                y=df[col],
                mode="lines",
                name=col,
                line=dict(width=2),
            )
        )

    # Update layout for dark theme
    fig.update_layout(
        template="plotly_dark",
        plot_bgcolor="#282a36",
        paper_bgcolor="#282a36",
        title=dict(
            text="Tech stocks indexed to 2023-01-01=100",
            font=dict(size=20, color="white"),
            x=0.01,
            xanchor="left",
        ),
        legend=dict(
            font=dict(size=16, color="white"),
            bgcolor="#282a36",
            bordercolor="white",
            borderwidth=1,
        ),
        xaxis=dict(
            showgrid=True,
            gridcolor="white",
            tickfont=dict(size=14, color="white"),
        ),
        yaxis=dict(
            showgrid=True,
            gridcolor="white",
            tickfont=dict(size=14, color="white"),
            range=[0, 1250],
        ),
    )

    # Return the figure
    return fig

# Load latest file
timestamp = datetime.now().strftime("%Y-%m-%d")
data_rebase = pd.read_csv(
    f"data/processed/stock_data_rebased_{timestamp}.csv", index_col=0, parse_dates=True
)

# Step 3: Generate interactive plot
fig = plot_stock_timeseries_interactive(data_rebase)

# Step 4: Display the plot
fig.show()
```
```{python}
#| echo: false
from datetime import datetime

# Display last update time
current_time = datetime.now().strftime("%d-%m-%Y %H:%M")
print(f"Last updated: {current_time}")
```

## Weekly indicators
```{python}
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load latest file
timestamp = datetime.now().strftime("%Y-%m-%d")
df = pd.read_csv(
    f"data/raw/gdpnow_data_{timestamp}.csv", index_col=0, parse_dates=True
)

# Create a seaborn time series plot with a white grid theme using an ax object
sns.set_theme(style="whitegrid")  # White grid background
fig, ax = plt.subplots(figsize=(5, 3))
sns.lineplot(data=df, x=df.index, y="Ggdpnow", linewidth=2.5, color="blue", ax=ax)

# Customize the plot
ax.set_title("US GDP Nowcast (Seasonally Adjusted Annual Rate)", fontsize=12)
ax.set_xlabel("", fontsize=12)
ax.set_ylabel("", fontsize=12)
ax.grid(visible=True, linestyle="--", alpha=0.6)
ax.spines["left"].set_color("none")
ax.spines["bottom"].set_color("none")
ax.spines["right"].set_color("none")
ax.spines["top"].set_color("none")
# Add a horizontal line at y=0
ax.axhline(0, color="gray", linestyle="--", linewidth=1.5, alpha=0.8)

# Show the plot
plt.tight_layout()
plt.show()
```
:::


